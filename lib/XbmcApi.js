// Generated by CoffeeScript 1.4.0
(function() {
  var XbmcApi, defer, pubsub,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  pubsub = require('./PubSub');

  XbmcApi = (function() {

    function XbmcApi(options) {
      var _this = this;
      this.options = options != null ? options : {};
      this.disconnect = __bind(this.disconnect, this);

      this.connect = __bind(this.connect, this);

      this.message = __bind(this.message, this);

      this.send = __bind(this.send, this);

      this.initialize = __bind(this.initialize, this);

      this.setConnection = __bind(this.setConnection, this);

      this.loadModules = __bind(this.loadModules, this);

      this.queue = [];
      this.connection = null;
      this.pubsub = pubsub;
      this.loadModules();
      pubsub.on('connection:open', function() {
        if (!_this.options.silent) {
          return _this.message('Attached to XBMC instance.');
        }
      });
      pubsub.on('connection:notification', this.notifications.delegate);
      if (this.options.connection != null) {
        this.setConnection(this.options.connection);
      }
    }

    XbmcApi.prototype.on = function(evt, callback) {
      return pubsub.on(evt, callback);
    };

    XbmcApi.prototype.emit = function(evt, data) {
      return pubsub.emit(evt, data);
    };

    XbmcApi.prototype.loadModules = function() {
      var module, _i, _len, _ref, _results;
      _ref = ['./Media', './Notifications', './Handlers', './Player', './Input', './Application'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        _results.push(require(module).mixin(this));
      }
      return _results;
    };

    XbmcApi.prototype.setConnection = function(newConnection) {
      if (this.connection) {
        this.connection.close();
      }
      this.connection = newConnection;
      this.queue.forEach(function(item) {
        return this.send(item.method, item.params, item.dfd);
      });
      this.queue = [];
      return this.initialize();
    };

    XbmcApi.prototype.initialize = function() {
      var obj;
      obj = this.send('Player.GetActivePlayers');
      return obj.then(this.handlers.players);
    };

    XbmcApi.prototype.send = function(method, params, dfd) {
      var connDfd, data;
      if (params == null) {
        params = {};
      }
      if (dfd == null) {
        dfd = null;
      }
      data = {
        method: method,
        params: params
      };
      if (!this.connection) {
        data.dfd = defer();
        this.queue.push(data);
        return data.dfd.promise;
      }
      connDfd = this.connection.send(data);
      if (dfd) {
        connDfd.pipe(dfd.resolve);
      }
      return connDfd;
    };

    XbmcApi.prototype.scrub = function(data) {
      if (data.thumbnail) {
        data.thumbnail = decodeURIComponent(data.thumbnail.replace(/^image:\/\/|\/$/ig, ''));
      }
      return data;
    };

    XbmcApi.prototype.message = function(message, title, displayTime) {
      var options;
      if (message == null) {
        message = '';
      }
      if (title == null) {
        title = null;
      }
      if (displayTime == null) {
        displayTime = 6000;
      }
      if (title == null) {
        title = this.options.agent || 'node-xbmc';
      }
      options = {
        message: message,
        title: title,
        displaytime: displayTime
      };
      return this.send('GUI.ShowNotification', options);
    };

    XbmcApi.prototype.connect = function() {
      if (this.connection) {
        if (this.connection.isActive()) {
          this.connection.close();
        }
        return this.connection.create();
      }
    };

    XbmcApi.prototype.disconnect = function(fn) {
      var _ref;
      if (fn == null) {
        fn = null;
      }
      if ((_ref = this.connection) != null ? _ref.isActive() : void 0) {
        return this.connection.close(fn);
      }
      if (fn) {
        return fn();
      }
    };

    return XbmcApi;

  })();

  module.exports = XbmcApi;

}).call(this);
