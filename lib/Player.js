// Generated by CoffeeScript 1.4.0
(function() {
  var Player, pubsub;

  pubsub = require('./PubSub');

  Player = (function() {

    function Player() {}

    Player.mixin = function(api) {
      var method, name;
      this.api = api;
      api.player = {};
      for (name in this) {
        method = this[name];
        api.player[name] = method;
      }
      return delete api.player.mixin;
    };

    Player.open = function(item, options, fn) {
      var dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      dfd = Player.api.send('Player.Open', {
        item: item,
        options: options
      });
      return dfd.then(function(data) {
        pubsub.emit('player.open', data);
        if (fn) {
          return fn(data);
        }
      });
    };

    Player.GetActivePlayers = function( fn ) {
      var dfd = Player.api.send('Player.GetActivePlayers');
      return dfd.then(function(data) {
        return fn ? fn(data) : function() {};
      });
    };

    Player.PlayPause = function(fn) {
      var dfd;
      if (fn == null) {
        fn = null;
      }
      return Player.GetActivePlayers( function( data ) {
        playerId = (((_ref = data.result) != null ? _ref[0] : void 0) || data.player || {}).playerid;
        dfd = Player.api.send('Player.PlayPause', {
         playerid: playerId
        });
        return dfd.then(function(data) {
          pubsub.emit('player.playpause', data);
          if (fn) {
            return fn(data);
          }
        });
      });
    };

    Player.Stop = function(fn) {
      var dfd;
      if (fn == null) {
        fn = null;
      }
      return Player.GetActivePlayers( function( data ) {
        playerId = (((_ref = data.result) != null ? _ref[0] : void 0) || data.player || {}).playerid;
        dfd = Player.api.send('Player.Stop', {
         playerid: playerId
        });
        return dfd.then(function(data) {
          pubsub.emit('player.stop', data);
          if (fn) {
            return fn(data);
          }
        });
      });
    };

    Player.Forward = function(fn) {
      return Player.Rewind(fn, true);
    };

    Player.Rewind = function(fn, forward) {
      var dfd;
      if (fn == null) {
        fn = null;
      }
      forward = !forward ? 'decrement' : 'increment';
      return Player.GetActivePlayers( function( data ) {
        playerId = (((_ref = data.result) != null ? _ref[0] : void 0) || data.player || {}).playerid;
        dfd = Player.api.send('Player.SetSpeed', {
         playerid: playerId,
         "speed": forward 
        });
        return dfd.then(function(data) {
          pubsub.emit('player.playpause', data);
          if (fn) {
            return fn(data);
          }
        });
      });
    };

    Player.openYoutube = function(id, options, fn) {
      var item;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      item = {
        file: "plugin://plugin.video.youtube/?action=play_video&videoid=" + id
      };
      return Player.open(item, options, fn);
    };

    Player.openFile = function(file, options, fn) {
      var item;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      item = {
        file: file
      };
      return Player.open(item, options, fn);
    };

    return Player;

  }).call(this);

  module.exports = Player;

}).call(this);
